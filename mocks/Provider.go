// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	metrics "github.com/hyperledger/fabric/common/metrics"
	mock "github.com/stretchr/testify/mock"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

// NewCounter provides a mock function with given fields: _a0
func (_m *Provider) NewCounter(_a0 metrics.CounterOpts) metrics.Counter {
	ret := _m.Called(_a0)

	var r0 metrics.Counter
	if rf, ok := ret.Get(0).(func(metrics.CounterOpts) metrics.Counter); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Counter)
		}
	}

	return r0
}

// NewGauge provides a mock function with given fields: _a0
func (_m *Provider) NewGauge(_a0 metrics.GaugeOpts) metrics.Gauge {
	ret := _m.Called(_a0)

	var r0 metrics.Gauge
	if rf, ok := ret.Get(0).(func(metrics.GaugeOpts) metrics.Gauge); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Gauge)
		}
	}

	return r0
}

// NewHistogram provides a mock function with given fields: _a0
func (_m *Provider) NewHistogram(_a0 metrics.HistogramOpts) metrics.Histogram {
	ret := _m.Called(_a0)

	var r0 metrics.Histogram
	if rf, ok := ret.Get(0).(func(metrics.HistogramOpts) metrics.Histogram); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Histogram)
		}
	}

	return r0
}
